{
  "JUNIE_TASK": {
    "Title": "Implement Ethical Drift Monitor and Persona Integrity System (Archivist Phase 12)",
    "Preconditions": {
      "repo": "agent-factory",
      "branch": "main",
      "required_files": [
        "factory_agents/archivist/reasoning_core.py",
        "factory_agents/archivist/persona_archivist.yaml"
      ]
    },
    "Plan": [
      "1) Implement an Ethical Drift Monitor (EDM) inside reasoning_core.py to track persona alignment over time.",
      "2) Parse persona_archivist.yaml to extract baseline tone, mission, and ethical statements.",
      "3) For each response generated by think(), compute a cosine similarity between baseline descriptors and current output embedding (OpenAI text-embedding-3-small).",
      "4) Log drift score (0‚Äì1) to /logs/persona_drift.log with timestamp and summary.",
      "5) Trigger a ‚ö†Ô∏è warning if similarity drops below 0.75, advising human review.",
      "6) Add a 'drift status' chat command to report the last 5 drift events and their scores.",
      "7) Ensure all drift events are auditable and stored with SHA-256 hash for integrity.",
      "8) Maintain lightweight, passive monitoring‚Äîno interference with response generation."
    ],
    "Edits": [
      {
        "Path": "factory_agents/archivist/reasoning_core.py",
        "Change": """# === PATCH START ===\nimport hashlib\n\ndef compute_persona_drift(response_text: str):\n    \"\"\"Compare response to persona baseline and log alignment score.\"\"\"\n    import yaml, numpy as np\n    from openai import OpenAI\n    client = OpenAI()\n    baseline_text = ''\n    try:\n        with open('factory_agents/archivist/persona_archivist.yaml', 'r', encoding='utf-8') as f:\n            persona = yaml.safe_load(f)\n        baseline_text = ' '.join([str(v) for v in persona.values() if isinstance(v, str)])\n    except Exception as e:\n        baseline_text = f'Error loading persona baseline: {e}'\n    try:\n        b_embed = client.embeddings.create(model='text-embedding-3-small', input=baseline_text).data[0].embedding\n        r_embed = client.embeddings.create(model='text-embedding-3-small', input=response_text).data[0].embedding\n        sim = np.dot(b_embed, r_embed) / (np.linalg.norm(b_embed) * np.linalg.norm(r_embed))\n    except Exception as e:\n        sim = 0.0\n    drift_level = 'Stable' if sim >= 0.85 else 'Monitor' if sim >= 0.75 else '‚ö†Ô∏è Drift'\n    record = {\n        'timestamp': datetime.datetime.utcnow().isoformat(),\n        'score': round(float(sim), 3),\n        'level': drift_level,\n        'hash': hashlib.sha256(response_text.encode()).hexdigest()\n    }\n    os.makedirs('logs', exist_ok=True)\n    with open(os.path.join('logs', 'persona_drift.log'), 'a', encoding='utf-8') as log:\n        log.write(json.dumps(record) + '\\n')\n    return record\n\n# Integrate into think()\nold_think_edm = think\ndef think(message: str):\n    reply = old_think_edm(message)\n    drift = compute_persona_drift(reply)\n    if drift['level'] == '‚ö†Ô∏è Drift':\n        reply += f"\\n\\n‚ö†Ô∏è Ethical Drift Alert: Similarity score {drift['score']}. Recommend human review."\n    return reply\n# === PATCH END ==="""
      },
      {
        "Path": "factory_agents/archivist/fastapi_server.py",
        "Change": """# === PATCH START ===\nif message.lower().strip() == 'drift status':\n    import json\n    path = os.path.join('logs', 'persona_drift.log')\n    if not os.path.exists(path):\n        return {'reply': format_response({'reply': 'No drift logs yet.'})}\n    with open(path, 'r', encoding='utf-8') as f:\n        lines = f.readlines()[-5:]\n    entries = [json.loads(l) for l in lines]\n    summary = '\\n'.join([f"- {e['timestamp']} | Score: {e['score']} | Level: {e['level']}" for e in entries])\n    return {'reply': format_response({'reply': f"üúÇ **Recent Ethical Drift Reports**\\n{summary}"})}\n# === PATCH END ==="""
      }
    ],
    "Tests": [
      "1) Restart Archy FastAPI server.",
      "2) Send multiple chat messages to generate responses.",
      "3) Send message: 'drift status' to retrieve recent drift metrics.",
      "4) Verify /logs/persona_drift.log contains timestamped drift entries.",
      "5) Confirm low similarity (<0.75) triggers in-chat ‚ö†Ô∏è Drift warning.",
      "6) Ensure SHA-256 hash logged for every entry."
    ],
    "Verification": [
      "Ethical Drift Monitor runs automatically with each response.",
      "Drift levels (Stable / Monitor / Drift) calculated correctly.",
      "Logs contain valid timestamps, scores, and hashes.",
      "Governance alerts appear only when ethical deviation detected."
    ],
    "Rollback": [
      "git restore factory_agents/archivist/reasoning_core.py",
      "git restore factory_agents/archivist/fastapi_server.py"
    ]
  }
}