from pathlib import Path
import yaml
from datetime import datetime
from factory_agents.archivist.file_access import safe_write

BASE_DIR = Path(__file__).resolve().parents[2]
PRINCIPLES_FILE = BASE_DIR / "factory_governance" / "genesis_principles.yaml"


def load_principles() -> dict:
    """Load and parse Genesis governance principles; log audit results."""
    try:
        if not PRINCIPLES_FILE.exists():
            safe_write("logs/governance_audit.log", f"[{datetime.now()}] Doctrine missing\n")
            return {"error": "Principles file missing"}
        with open(PRINCIPLES_FILE, "r", encoding="utf-8") as f:
            data = yaml.safe_load(f)
        safe_write("logs/governance_audit.log", f"[{datetime.now()}] Doctrine loaded OK\n")
        return data or {"error": "Empty or malformed YAML"}
    except Exception as e:
        safe_write("logs/governance_audit.log", f"[{datetime.now()}] Doctrine load error: {e}\n")
        return {"error": str(e)}


def summarize_principles() -> str:
    """Readable summary for reasoning integration."""
    data = load_principles()
    if "error" in data:
        return f"[PrinciplesError] {data['error']}"
    try:
        principles = "\n".join(f"â€¢ {p}" for p in data.get("principles", []))
        return f"Genesis Principles (v{data.get('version','?')}):\n{principles}"
    except Exception as e:
        return f"[SummaryError] {e}"
# Auto-generated by Junie Task Executor
# principles_loader.py
